{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let CodigoBarrasService = /*#__PURE__*/(() => {\n  class CodigoBarrasService {\n    calcularCodigoBarras(codigo, peso, precio) {\n      const multi = peso * precio;\n      const parteEnteramulti = Math.trunc(multi);\n      const redondeado = Math.ceil(multi * 1000);\n      const redondeado2 = Math.ceil(multi * 100);\n      const dosD = String(redondeado).substring(0, 2);\n      const tresD = String(redondeado).substring(0, 3);\n      const cuatroD = String(redondeado).substring(0, 4);\n      const numeroStr = multi.toString();\n      const partes = numeroStr.split(\".\");\n      const parteEntera = partes[0];\n      const parteDecimal = partes[1] || \"\";\n      let nuevoprimerDecimal = 0;\n      let nuevoSegundoDecimal = 0;\n      console.log('peso: ' + peso, precio);\n      console.log('multi :' + multi);\n      console.log(parteDecimal);\n\n      if (parteDecimal.length >= 3) {\n        const tercerDecimal = parseInt(parteDecimal[2], 10);\n        const segundoDecimal = parseInt(parteDecimal[1], 10);\n        const primerDecimal = parseInt(parteDecimal[0], 10);\n\n        if (tercerDecimal >= 5) {\n          const nuevoSegundoDecimal = (segundoDecimal + 1) % 10;\n          const nuevoprimerDecimal = primerDecimal + (segundoDecimal + 1 >= 10 ? 1 : 0);\n\n          if (parteEnteramulti < 10) {\n            let resultado = `26${codigo}000${parteEntera}${nuevoprimerDecimal}${nuevoSegundoDecimal}`;\n            const codigoConUltimoDigito = calcularUltimoDigito(resultado);\n            return `26${codigo}000${parteEntera}${nuevoprimerDecimal}${nuevoSegundoDecimal}${codigoConUltimoDigito}`;\n          } else {\n            let resultado = `26${codigo}00${tresD}${nuevoSegundoDecimal}`;\n            const codigoConUltimoDigito = calcularUltimoDigito(resultado);\n            return `26${codigo}00${tresD}${nuevoSegundoDecimal}${codigoConUltimoDigito}`;\n          }\n        } else {\n          nuevoSegundoDecimal = segundoDecimal;\n          nuevoprimerDecimal = primerDecimal;\n          console.log('2do2', segundoDecimal);\n          console.log('1er', primerDecimal);\n\n          if (parteEnteramulti < 10) {\n            let resultado = `26${codigo}000${parteEntera}${primerDecimal}${segundoDecimal}`;\n            const codigoConUltimoDigito = calcularUltimoDigito(resultado);\n            return `26${codigo}000${parteEntera}${primerDecimal}${segundoDecimal}${codigoConUltimoDigito}`;\n          } else if (parteEnteramulti >= 10) {\n            let resultado = `26${codigo}00${tresD}${segundoDecimal}`;\n            const codigoConUltimoDigito = calcularUltimoDigito(resultado);\n            return `26${codigo}00${tresD}${segundoDecimal}${codigoConUltimoDigito}`;\n          }\n        }\n      }\n\n      const codigoConUltimoDigito = calcularUltimoDigito(`26${codigo}00${tresD}${nuevoSegundoDecimal}`);\n      return `26${codigo}00${tresD}${nuevoSegundoDecimal}${codigoConUltimoDigito}`;\n    }\n\n  }\n\n  CodigoBarrasService.ɵfac = function CodigoBarrasService_Factory(t) {\n    return new (t || CodigoBarrasService)();\n  };\n\n  CodigoBarrasService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CodigoBarrasService,\n    factory: CodigoBarrasService.ɵfac,\n    providedIn: \"root\"\n  });\n  return CodigoBarrasService;\n})();\n\nfunction calcularUltimoDigito(codigoBarras) {\n  // Verificar que el código de barras tenga 12 caracteres\n  if (codigoBarras.length !== 12) {\n    console.log(codigoBarras);\n    throw new Error(\"El código de barras debe tener 12 caracteres.\");\n  } // Convertir el código de barras en un arreglo de números\n\n\n  const numeros = codigoBarras.split(\"\").map(char => parseInt(char, 10)); // Sumar todos los dígitos en las posiciones pares (0-indexed)\n\n  let sumaPares = 0;\n\n  for (let i = 0; i < numeros.length; i++) {\n    if (i % 2 === 0) {\n      sumaPares += numeros[i];\n    }\n  } // Sumar todos los dígitos en las posiciones impares (0-indexed)\n\n\n  let sumaImpares = 0;\n\n  for (let i = 0; i < numeros.length; i++) {\n    if (i % 2 === 1) {\n      sumaImpares += numeros[i];\n    }\n  } // Multiplicar por 3 el valor obtenido en la suma de los dígitos impares\n\n\n  const multiplicadoPorTres = sumaImpares * 3; // Sumar este valor más la suma de los pares\n\n  const sumaTotal = multiplicadoPorTres + sumaPares; // Redondear el valor obtenido a la decena inmediatamente superior\n\n  const redondeado = Math.ceil(sumaTotal / 10) * 10; // Calcular el dígito de control restando la suma total del redondeo\n\n  const digitoControl = redondeado - sumaTotal;\n  return digitoControl;\n}","map":null,"metadata":{},"sourceType":"module"}