{"ast":null,"code":"import { EventEmitter, Component, ViewEncapsulation, ElementRef, NgZone, Input, Output, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { supported, create } from 'filepond';\nimport * as ɵngcc0 from '@angular/core';\nexport { registerPlugin } from 'filepond'; // We test if filepond is supported on the current client\n\nconst isSupported = supported(); // List of attributes for fallback input\n\nconst inputAttributes = [\"id\", \"name\", \"class\", \"multiple\", \"required\", \"disabled\", \"capture\", \"accept\"]; // Methods not made available on the component\n\nconst filteredComponentMethods = [\"setOptions\", \"on\", \"off\", \"onOnce\", \"appendTo\", \"insertAfter\", \"insertBefore\", \"isAttachedTo\", \"replaceElement\", \"restoreElement\", \"destroy\"];\nconst outputs = [\"oninit\", \"onwarning\", \"onerror\", \"onactivatefile\", \"onaddfilestart\", \"onaddfileprogress\", \"onaddfile\", \"onprocessfilestart\", \"onprocessfileprogress\", \"onprocessfileabort\", \"onprocessfilerevert\", \"onprocessfile\", \"onprocessfiles\", \"onremovefile\", \"onpreparefile\", \"onupdatefiles\"]; // Component outline\n\nlet FilePondComponent = /*#__PURE__*/(() => {\n  class FilePondComponent {\n    constructor(root, zone) {\n      this.options = {}; // same as outputs array\n\n      this.oninit = new EventEmitter();\n      this.onwarning = new EventEmitter();\n      this.onerror = new EventEmitter();\n      this.onactivatefile = new EventEmitter();\n      this.onaddfilestart = new EventEmitter();\n      this.onaddfileprogress = new EventEmitter();\n      this.onaddfile = new EventEmitter();\n      this.onprocessfilestart = new EventEmitter();\n      this.onprocessfileprogress = new EventEmitter();\n      this.onprocessfileabort = new EventEmitter();\n      this.onprocessfilerevert = new EventEmitter();\n      this.onprocessfile = new EventEmitter();\n      this.onprocessfiles = new EventEmitter();\n      this.onremovefile = new EventEmitter();\n      this.onpreparefile = new EventEmitter();\n      this.onupdatefiles = new EventEmitter();\n      this.handleEvent = null;\n      this.root = root;\n      this.zone = zone;\n    }\n\n    ngAfterViewInit() {\n      const input = this.root.nativeElement.querySelector(\"input\"); // transfer relevant attributes to input, this so we still have an input with the correct attributes should file pond not load\n\n      const attributes = this.root.nativeElement.attributes;\n      inputAttributes.forEach(name => {\n        const value = attributes[name] ? attributes[name].value : this.options[name];\n\n        if (!value) {\n          return;\n        }\n\n        input.setAttribute(name, value);\n      }); // no sufficient features supported in this browser\n\n      if (!isSupported) {\n        return;\n      } // map FilePond events to Angular @outputs\n\n\n      this.handleEvent = e => {\n        this[`on${e.type.split(\":\")[1]}`].emit(Object.assign({}, e.detail));\n      };\n\n      outputs.forEach(event => {\n        this.root.nativeElement.addEventListener(`FilePond:${event.substr(2)}`, this.handleEvent);\n      }); // will block angular from listening to events inside the pond\n\n      this.zone.runOutsideAngular(() => {\n        // create instance\n        this.pond = create(input, Object.assign(Object.assign({}, this.options), {\n          // our initial files\n          files: this.files\n        }));\n      }); // Copy instance method references to component instance\n\n      Object.keys(this.pond) // remove unwanted methods\n      .filter(key => filteredComponentMethods.indexOf(key) === -1) // set method references from the component instance to the pond instance\n      .forEach(key => {\n        this[key] = this.pond[key];\n      });\n    }\n\n    ngOnChanges(changes) {\n      // no need to handle first change\n      if (changes.firstChange) {\n        return;\n      } // no filepond instance available\n\n\n      if (!this.pond) {\n        return;\n      } // use new options object as base ( or if not available, use current options )\n\n\n      const options = changes.options ? changes.options.currentValue : this.options; // see if file list has changed\n\n      if (changes.files && JSON.stringify(changes.files.previousValue) !== JSON.stringify(changes.files.currentValue)) {\n        // file list has changed\n        options.files = changes.files.currentValue;\n      } // set new options\n\n\n      this.pond.setOptions(options);\n    }\n\n    ngOnDestroy() {\n      if (!this.pond) {\n        return;\n      }\n\n      outputs.forEach(event => {\n        this.root.nativeElement.removeEventListener(`FilePond:${event.substr(2)}`, this.handleEvent);\n      });\n      this.pond.destroy();\n    }\n\n  }\n\n  FilePondComponent.ɵfac = function FilePondComponent_Factory(t) {\n    return new (t || FilePondComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  FilePondComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: FilePondComponent,\n    selectors: [[\"file-pond\"]],\n    inputs: {\n      options: \"options\",\n      files: \"files\"\n    },\n    outputs: {\n      oninit: \"oninit\",\n      onwarning: \"onwarning\",\n      onerror: \"onerror\",\n      onactivatefile: \"onactivatefile\",\n      onaddfilestart: \"onaddfilestart\",\n      onaddfileprogress: \"onaddfileprogress\",\n      onaddfile: \"onaddfile\",\n      onprocessfilestart: \"onprocessfilestart\",\n      onprocessfileprogress: \"onprocessfileprogress\",\n      onprocessfileabort: \"onprocessfileabort\",\n      onprocessfilerevert: \"onprocessfilerevert\",\n      onprocessfile: \"onprocessfile\",\n      onprocessfiles: \"onprocessfiles\",\n      onremovefile: \"onremovefile\",\n      onpreparefile: \"onpreparefile\",\n      onupdatefiles: \"onupdatefiles\"\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"filepond--wrapper\"], [\"type\", \"file\"]],\n    template: function FilePondComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelement(1, \"input\", 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return FilePondComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet FilePondModule = /*#__PURE__*/(() => {\n  class FilePondModule {}\n\n  FilePondModule.ɵfac = function FilePondModule_Factory(t) {\n    return new (t || FilePondModule)();\n  };\n\n  FilePondModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: FilePondModule\n  });\n  FilePondModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return FilePondModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(FilePondModule, {\n    declarations: function () {\n      return [FilePondComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [FilePondComponent];\n    }\n  });\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { FilePondComponent, FilePondModule }; //# sourceMappingURL=ngx-filepond.js.map","map":null,"metadata":{},"sourceType":"module"}